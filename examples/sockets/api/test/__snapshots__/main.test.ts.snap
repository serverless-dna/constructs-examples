// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
{
  "Outputs": {
    "socketapiCallbackUrlAF8AADED": {
      "Export": {
        "Name": "dev-socket-api-CallbackUrl",
      },
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "socketapidevsocketapisocket173F608B",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/dev",
          ],
        ],
      },
    },
    "socketapiStageUrl1D3E64F4": {
      "Export": {
        "Name": "dev-socket-api-StageUrl",
      },
      "Value": {
        "Fn::Join": [
          "",
          [
            "wss://",
            {
              "Ref": "socketapidevsocketapisocket173F608B",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/dev",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "socketapidevsocketapiD12B10BD": {
      "Properties": {
        "ApiId": {
          "Ref": "socketapidevsocketapisocket173F608B",
        },
        "AutoDeploy": true,
        "StageName": "dev",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "socketapidevsocketapisocket173F608B": {
      "Properties": {
        "Name": "dev-socket-api-socket",
        "ProtocolType": "WEBSOCKET",
        "RouteSelectionExpression": "$request.body.action",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "socketapidevsocketapisockettestRoute9107A22D": {
      "Properties": {
        "ApiId": {
          "Ref": "socketapidevsocketapisocket173F608B",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "test",
        "RouteResponseSelectionExpression": "$default",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "socketapidevsocketapisockettestRouteintegrationtestF017A26F",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "socketapidevsocketapisockettestRouteResponse6818D646": {
      "Properties": {
        "ApiId": {
          "Ref": "socketapidevsocketapisocket173F608B",
        },
        "RouteId": {
          "Ref": "socketapidevsocketapisockettestRoute9107A22D",
        },
        "RouteResponseKey": "$default",
      },
      "Type": "AWS::ApiGatewayV2::RouteResponse",
    },
    "socketapidevsocketapisockettestRouteintegrationtestF017A26F": {
      "Properties": {
        "ApiId": {
          "Ref": "socketapidevsocketapisocket173F608B",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "testfunc53D855DE",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "socketapidevsocketapisockettestRouteintegrationtestPermission5CD95C3E": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "testfunc53D855DE",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "socketapidevsocketapisocket173F608B",
              },
              "/*/*test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "testfunc53D855DE": {
      "DependsOn": [
        "testfuncServiceRoleE52DD720",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7dfbc5d3433458c42b9cac8fe964c12687268e8efd59cee7d8da74a13c5a4e3e.zip",
        },
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.noopHandler",
        "Role": {
          "Fn::GetAtt": [
            "testfuncServiceRoleE52DD720",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 3,
      },
      "Type": "AWS::Lambda::Function",
    },
    "testfuncServiceRoleE52DD720": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
